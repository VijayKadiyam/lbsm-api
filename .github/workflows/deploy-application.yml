name: Deploy Laravel Application

on:
  push:
    branches:
      - master

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure PHP 7.4
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install composer dependencies
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment artifacts
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./deployment-config.json)"
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            # Create a new directory with the commit hash as the directory name
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

            # Extract the tar file into our release directory
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

            # To delete the storage folder from the release directory
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage

            # Create Laravel storage directories and set permissions
            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{ matrix.server.path }}/storage/framework/cache/data
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifacts, prepare-release-on-server]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Runs before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA, RELEASE_PATH, ACTIVE_PATH, STORAGE_PATH, BASE_PATH
          script: |
            ${{ matrix.server.beforeHooks }}

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs:
      [create-deployment-artifacts, prepare-release-on-server, run-before-hooks]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
          VIRTUAL_HOST_FILE_PATH: ${{ matrix.server.virtualHostFilePath }}
          VIRTUAL_HOST_FILE: ${{ matrix.server.virtualHostFile }}
          SERVER_NAME: ${{ matrix.server.serverName }}
          SERVER_ALIAS: ${{ matrix.server.serverAlias }}
          SERVER_ADMIN: ${{ matrix.server.serverAdmin }}
          REFRESH_VIRTUAL_HOST: ${{ matrix.server.refreshVirtualHost }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA, RELEASE_PATH, ACTIVE_RELEASE_PATH, STORAGE_PATH, BASE_PATH, LARAVEL_ENV, VIRTUAL_HOST_FILE_PATH, SERVER_NAME, SERVER_ALIAS, SERVER_ADMIN, REFRESH_VIRTUAL_HOST, VIRTUAL_HOST_FILE
          script: |
            # To copy the secret env created into the server
            printf "%s" "$LARAVEL_ENV" > "$BASE_PATH/.env"

            # To link the env into the release path
            ln -s -f "$BASE_PATH/.env" $RELEASE_PATH

            # To link the storage into the release path
            ln -s -f $STORAGE_PATH $RELEASE_PATH

            # To link the release path as the active release path
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH

            # To config clear
            cd $ACTIVE_RELEASE_PATH
            php artisan config:clear
            php artisan migrate

            # This code is to generate the virtual host if it is not there
            if [ ! -e $VIRTUAL_HOST_FILE_PATH/$VIRTUAL_HOST_FILE ] || [ $REFRESH_VIRTUAL_HOST = true ]; then
              echo "
              <VirtualHost *:80>
                ServerAdmin $SERVER_ADMIN
                ServerName $SERVER_NAME
                ServerAlias $SERVER_ALIAS
                DocumentRoot $ACTIVE_RELEASE_PATH/public/
                <Directory  $ACTIVE_RELEASE_PATH/public>
                  AllowOverride All
                </Directory>

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined
              </VirtualHost>" > $VIRTUAL_HOST_FILE_PATH/$VIRTUAL_HOST_FILE

              sudo a2ensite $VIRTUAL_HOST_FILE
              systemctl reload apache2
            fi

  run-after-hooks:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs:
      [create-deployment-artifacts, prepare-release-on-server, activate-release]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Runs after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA, RELEASE_PATH, ACTIVE_PATH, STORAGE_PATH, BASE_PATH
          script: |
            ${{ matrix.server.afterHooks }}

  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-server,
        activate-release,
        run-after-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Runs clean up
        uses: appleboy/ssh-action@master
        env:
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
          RELEASE_PATH: ${{ matrix.server.path }}/releases
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: RELEASE_PATH, ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +2 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +2 | xargs rm -rf
